#include <Wire.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <MAX30100_PulseOximeter.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <ArduinoJson.h>

// WiFi & MQTT
const char* ssid = "SSIoT-02";
const char* password = "SSIoT-02";
const char* mqtt_server = "pi102.local";
const int mqtt_port = 1883;

// MAX30100
PulseOximeter pox;
#define REPORTING_PERIOD_MS 1000
uint32_t tsLastReport = 0;

// LED pin
const int LED_GREEN = 16;
const int LED_YELLOW = 17;
const int LED_RED = 18;

// MQTT Client
WiFiClient espClient;
PubSubClient client(espClient);

// NTP
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 7 * 3600); // GMT+7

// MQTT topic
const char* topic_vitals = "A1/1/101";

void setup_wifi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");
}

void reconnect_mqtt() {
  while (!client.connected() && WiFi.status() == WL_CONNECTED) {
    String clientId = "ESP32Client-" + String(WiFi.macAddress());
    if (!client.connect(clientId.c_str())) {
      Serial.println("MQTT reconnect failed. Retrying...");
      delay(5000);
    }
  }
}

void onBeatDetected() {
  Serial.println("Beat detected");
}

void setup() {
  Serial.begin(115200);
  Serial.println("Starting setup...");

  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_YELLOW, OUTPUT);
  pinMode(LED_RED, OUTPUT);

  digitalWrite(LED_GREEN, LOW);
  digitalWrite(LED_YELLOW, LOW);
  digitalWrite(LED_RED, LOW);

  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);

  if (!pox.begin()) {
    Serial.println("MAX30100 not found. Check wiring.");
    while (1);
  }

  Serial.println("MAX30100 ready.");

  pox.setIRLedCurrent(MAX30100_LED_CURR_27_1MA);
  pox.setOnBeatDetectedCallback(onBeatDetected);

  timeClient.begin();
  timeClient.update();
}

void updateWarningLED(float hr, float spo2) {
  bool red = false;
  bool yellow = false;

  // SpO2 check
  if (spo2 < 90) red = true;
  else if (spo2 >= 90 && spo2 < 95) yellow = true;

  // Heart rate check
  if (hr < 45 || hr > 130) red = true;
  else if ((hr >= 45 && hr < 55) || (hr > 110 && hr <= 130)) yellow = true;

  // Set LED based on warning level
  if (red) {
    digitalWrite(LED_RED, HIGH);
    digitalWrite(LED_YELLOW, LOW);
    digitalWrite(LED_GREEN, LOW);
  } else if (yellow) {
    digitalWrite(LED_RED, LOW);
    digitalWrite(LED_YELLOW, HIGH);
    digitalWrite(LED_GREEN, LOW);
  } else {
    digitalWrite(LED_RED, LOW);
    digitalWrite(LED_YELLOW, LOW);
    digitalWrite(LED_GREEN, HIGH);
  }
}

void loop() {
  pox.update();

  if (WiFi.status() != WL_CONNECTED) {
    setup_wifi();
  }

  if (!client.connected()) {
    reconnect_mqtt();
  }
  client.loop();

  if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
    tsLastReport = millis();

    float heartRate = pox.getHeartRate();
    float spo2 = pox.getSpO2();

    Serial.print("Heart rate: ");
    Serial.print(heartRate);
    Serial.print(" bpm | SpO2: ");
    Serial.print(spo2);
    Serial.println(" %");


    // Update LED status
    updateWarningLED(heartRate, spo2);

    // Get timestamp
    timeClient.update();
    time_t epochTime = timeClient.getEpochTime();
    struct tm* ptm = gmtime(&epochTime);
    char timeString[30];
    strftime(timeString, sizeof(timeString), "%Y-%m-%dT%H:%M:%SZ", ptm);

    // Create JSON payload
    StaticJsonDocument<256> json;
    json["heart_rate"] = heartRate;
    json["spo2"] = spo2;
    json["unit_hr"] = "bpm";
    json["unit_spo2"] = "%";
    json["timestamp"] = timeString;

    char payload[256];
    serializeJson(json, payload);

    bool success = client.publish(topic_vitals, payload);

    Serial.println("Sent JSON:");
    Serial.println(payload);
    Serial.println(success ? "Published successfully" : "Publish failed");
    Serial.println("------------------------------------------------");
  }
}

